<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
using System;

namespace SpimexAdapter
{
	public partial class InfoCommClient
    {
		private void ProcessRow(SpimexAdapter.FTE.RowChange row)
		{
			switch (row.tabId)
			{
<#
		var projectPath = Host.ResolvePath("..");

		var cs = File.ReadAllText(Path.Combine(projectPath, @"proto\FTEMessages.cs"));

        cs = Regex.Replace(cs, @"\[[^\]]+?\]", "");
        cs = Regex.Replace(cs, @"private global::ProtoBuf\.IExtension extensionObject.+?\}", "", RegexOptions.Singleline);
		cs = cs.Replace("global::ProtoBuf.IExtensible", "object");

		var result = CodeDomProvider.CreateProvider("CSharp").CompileAssemblyFromSource(new CompilerParameters(new [] { "System.dll" }), cs); 

		var assembly = result.CompiledAssembly;
			
		var tableType = assembly.GetType("SpimexAdapter.FTE.Table");

		var tables = Enum.GetValues(tableType).OfType<Enum>();; 

		var allClasses = assembly.GetTypes().Where(_ => _.Namespace == "SpimexAdapter.FTE").ToArray();

        var typeDict = tables.ToDictionary(t => t, t => allClasses.FirstOrDefault(c => c.Name.ToUpper().StartsWith("INFO" + t.ToString().ToUpper().Substring(0, t.ToString().Length - 3))));


		foreach(var table in tables)
		{
			var type = typeDict[table];

			if(type == null)
				continue;
			
#>
				case SpimexAdapter.FTE.Table.<#=table#>:
					On<#=type.Name#>?.Invoke(MessageParser.Deserialize<<#=type#>>(row.rowData));
					break;

<#
		}
#>
				default:
					return;
			}
		}
<#
		foreach(var table in tables)
		{
			var type = typeDict[table];

			if(type == null)
				continue;
#>
		
		public event Action<<#=type#>> On<#=type.Name#>;
<#
		}		
#>
	}
}