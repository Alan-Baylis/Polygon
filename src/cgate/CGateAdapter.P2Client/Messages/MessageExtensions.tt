<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="../../common.tt" #>
using System;  
using System.Diagnostics;  
using System.Text;
using JetBrains.Annotations;
using ru.micexrts.cgate.message;

<#
    var streams = StreamSet.Load(this.Host.ResolvePath(@"../../ini/scheme/"));
    foreach(var stream in streams.Streams)
    {
#>

namespace CGateAdapter.Messages.<#=Normalize(stream.Name) #>
{
    /// <summary>
    /// Конвертер потокового cgate сообщения StreamDataMessage в типизированное сообщение адаптера
    /// </summary>
    internal sealed class StreamDataMessageConverter : IMessageConverter
    {
        public CGateMessage ConvertToAdapterMessage(StreamDataMessage source)
        {
            return ConvertToAdapterMessage(source.MsgName, source);
        }
        
        public CGateMessage ConvertToAdapterMessage(DataMessage source)
        {
            return ConvertToAdapterMessage(source.MsgName, source);
        }
        
        private CGateMessage ConvertToAdapterMessage(string msgName, AbstractDataMessage source)
        {
            switch(msgName)
            {
<#
    foreach(var table in stream.Tables)
    {
    #>
                case "<#=table.Name #>":
                    return CGateMessageFactory.CreateCgm<#=Normalize(table.Name) #>(source);
<#
    }
#>            
            }
            return null;
        } // ConvertToAdapterMessage
    } // StreamDataMessageConverter
    
    internal static class CGateMessageFactory
    {<#
    foreach(var table in stream.Tables)
    {
    #>public static Cgm<#=Normalize(table.Name) #> CreateCgm<#=Normalize(table.Name) #>(AbstractDataMessage streamDataMessage)
        {
            var message = new Cgm<#=Normalize(table.Name) #>();

			        var dataMessage = streamDataMessage as StreamDataMessage;
        if (dataMessage != null)
			{
			    message.MsgIndex = dataMessage.MsgId;
			}
            
            <# foreach(var field in table.Fields)
        {
            if(field.Name == "msgid" || field.Name == "request" || field.Name == "reply")
            {
                continue;
            }

            var fieldValueName = "value_" + field.Name;
        #>
var <#=fieldValueName #> = streamDataMessage["<#=field.Name #>"];
            if (<#=fieldValueName #> != null)
            {
                message.<#=Normalize(field.Name) #> = <# 
				if(field.Name == "premium_order_reserve" || field.Name == "vm_order_reserve") // временный костыль
				{
				#><#=fieldValueName #>.asString() == "0.000000" ? 0 : <#
				}#><#=fieldValueName #>.<#=GetConvertionMethodName(field.Type) #>();
            }

            <# } #>
            return message;
        } // CreateCgm<#=Normalize(table.Name) #>
        
        <#
    }
#> 
    } // CGateMessageFactory    
}
<# } #>

namespace CGateAdapter.Messages
{
    internal static partial class CGateMessageConverter
    {
        private sealed partial class CGateMessageConverterVisitor : ICGateMessageVisitor
        {
            private readonly DataMessage dataMessage;

            public CGateMessageConverterVisitor(DataMessage dataMessage)
            {
                this.dataMessage = dataMessage;
            }

<#
        foreach(var typeName in ExtraMessageTypes())
        {
#>
        public void Handle(<#=typeName#> message)
        {
            message.CopyToDataMessage(dataMessage);
        }

<#
        }

        foreach(var stream in streams.Streams)
        {
            foreach(var table in stream.Tables)
            {
#>
            public void Handle(<#=Normalize(stream.Name) #>.Cgm<#=Normalize(table.Name) #> message)
            {
                message.CopyToDataMessage(dataMessage);
            }

<#
            }
        }
#>
        }
        
        public static void CopyToDataMessage(this CGateMessage source, DataMessage dataMessage)
        {
            source.Accept(new CGateMessageConverterVisitor(dataMessage));
        }

<#
foreach(var typeName in ExtraMessageTypes())
{
#>
        public static void CopyToDataMessage(this <#=typeName#> source, DataMessage dataMessage) { }

<#
}

foreach(var stream in streams.Streams)
{
    foreach(var table in stream.Tables)
    {
    #>
        public static void CopyToDataMessage(this CGateAdapter.Messages.<#=Normalize(stream.Name) #>.Cgm<#=Normalize(table.Name) #> source, DataMessage dataMessage)
        {
            Value field;
            bool shouldSet;

<#
        foreach(var field in table.Fields)
        {
            if(field.Name == "msgid" || field.Name == "request" || field.Name == "reply")
            {
                continue;
            }
#>
            // Поле <#=field.Name #>
            field =  dataMessage["<#=field.Name #>"];
            shouldSet = field != null;
<#

            if(field.Type == "string")
            {
#>
            if(shouldSet && string.IsNullOrEmpty(source.<#=Normalize(field.Name) #>))
            {
                shouldSet = false;
            }
<#
            }

            if(field.Type == "DateTime")
            {
#>
            if(shouldSet && (source.<#=Normalize(field.Name)#> == null || source.<#=Normalize(field.Name)#> == DateTime.MinValue))
            {
                shouldSet = false;
            }
<#
            }
#>
            if(shouldSet)
            {
                field.set(source.<#=Normalize(field.Name)#>);
            }

<#
        }
#>
        } // CopyToDataMessage(CGateAdapter.Messages.<#=Normalize(stream.Name) #>.Cgm<#=Normalize(table.Name) #>)

<#
    } 
}
#>
    } // CGateMessageConverter
} // CGateAdapter.Messages